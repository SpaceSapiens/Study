//Longest Common Subsequence
//https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/
#include<iostream>
#include<cstring>
using namespace std;
#include <bits/stdc++.h>
int LCS_naive(char* S1,char* S2,int m,int n)
{
    //Naive recursive implementation of LCS algorithm
    if(m==0||n==0)
    {
        return 0;
    }
    if(S1[m-1]==S2[n-1])
    {
        return 1+LCS_naive(S1,S2,m-1,n-1);
    }
    else
    {
        return std::max(LCS_naive(S1,S2,m,n-1),LCS_naive(S1,S2,m-1,n));
    }
    
}
int LCS_TopDown(char* S1,char* S2,int m,int n,vector<vector<int>>& dp)
{
    //Top Down implementation of LCS with complexity O(m,n) at worst case
    if(m==0||n==0)
        return 0;
    if(S1[m-1]==S2[n-1])
        return 1+LCS_TopDown(S1,S2,m-1,n-1,dp);
    if(dp[m][n]!=-1)
        return dp[m][n];
    return dp[m][n]=std::max(LCS_TopDown(S1,S2,m-1,n,dp),LCS_TopDown(S1,S2,m,n-1,dp));
}
int LCS_Tabulation(char* S1,char* S2,int m,int n)
{   
    //dp matrix is created within the LCS function
    int dp[m+1][n+1];
    for(int i=0;i<m+1;i++)
    {
        for(int j=0;j<n+1;j++)
        {
            //initialize the first row and column to -1
            if(i==0||j==0)
                dp[i][j]==-1;
            else if(S1[i-1]==S2[j-1])
                dp[i][j]=1+dp[i-1][j-1];
            else
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        }
    }
    return dp[m][n];
}
int main()
{
    //char X[] = "AGGTAB";
    //char Y[] = "GXTXAYB";
    char X[] = "FINNY";
    char Y[] = "PRINCY";
    int m = strlen(X);
    int n = strlen(Y);
    
    //std::cout<<"Length of LCS is "<< LCS_naive( X, Y, m, n ) ;
    //dp matrix with all -1 created in the main function for top-down approach
    //vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
    //std::cout<<"Length of LCS is "<< LCS_TopDown( X, Y, m, n,dp ) ;
    std::cout<<"Length of LCS is "<< LCS_Tabulation( X, Y, m, n ) ;
    return 0;
}
